// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace AdminLTE.Models
{
    public partial class HomecarerecruitmentContext : DbContext
    {
        public HomecarerecruitmentContext()
        {
        }

        public HomecarerecruitmentContext(DbContextOptions<HomecarerecruitmentContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AlertType> AlertType { get; set; }
        public virtual DbSet<Application> Application { get; set; }
        public virtual DbSet<Appointment> Appointment { get; set; }
        public virtual DbSet<AppointmentType> AppointmentType { get; set; }
        public virtual DbSet<Audit> Audit { get; set; }
        public virtual DbSet<AvailableHours> AvailableHours { get; set; }
        public virtual DbSet<AvailableWorkgroups> AvailableWorkgroups { get; set; }
        public virtual DbSet<Candidate> Candidate { get; set; }
        public virtual DbSet<ContactType> ContactType { get; set; }
        public virtual DbSet<CoordInterview> CoordInterview { get; set; }
        public virtual DbSet<Dbs> Dbs { get; set; }
        public virtual DbSet<DbsriskAssessment> DbsriskAssessment { get; set; }
        public virtual DbSet<EmploymentDocument> EmploymentDocument { get; set; }
        public virtual DbSet<EmploymentHistory> EmploymentHistory { get; set; }
        public virtual DbSet<FileType> FileType { get; set; }
        public virtual DbSet<FileUpload> FileUpload { get; set; }
        public virtual DbSet<HealthInformation> HealthInformation { get; set; }
        public virtual DbSet<NewStarterForm> NewStarterForm { get; set; }
        public virtual DbSet<Note> Note { get; set; }
        public virtual DbSet<NoteType> NoteType { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<NotificationOutcome> NotificationOutcome { get; set; }
        public virtual DbSet<NotificationStatus> NotificationStatus { get; set; }
        public virtual DbSet<NotificationType> NotificationType { get; set; }
        public virtual DbSet<PhoneInterview> PhoneInterview { get; set; }
        public virtual DbSet<Reference> Reference { get; set; }
        public virtual DbSet<ReferenceHistory> ReferenceHistory { get; set; }
        public virtual DbSet<ReferenceRiskAssessment> ReferenceRiskAssessment { get; set; }
        public virtual DbSet<RejectionReason> RejectionReason { get; set; }
        public virtual DbSet<ReliasTrainingData> ReliasTrainingData { get; set; }
        public virtual DbSet<ReliasTrainingDataView> ReliasTrainingDataView { get; set; }
        public virtual DbSet<ShadowShifts> ShadowShifts { get; set; }
        public virtual DbSet<StatementOfOffenses> StatementOfOffenses { get; set; }
        public virtual DbSet<StatementOfOffensesAddressList> StatementOfOffensesAddressList { get; set; }
        public virtual DbSet<StatementOfOffensesNameList> StatementOfOffensesNameList { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<TaskList> TaskList { get; set; }
        public virtual DbSet<TaskLog> TaskLog { get; set; }
        public virtual DbSet<TaskRules> TaskRules { get; set; }
        public virtual DbSet<TaskType> TaskType { get; set; }
        public virtual DbSet<TrainingRecord> TrainingRecord { get; set; }
        public virtual DbSet<UserAuditEvents> UserAuditEvents { get; set; }
        public virtual DbSet<VaccineDeclaration> VaccineDeclaration { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Application>(entity =>
            {
                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.Application)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Application_Candidate");

                entity.HasOne(d => d.RejectionReason)
                    .WithMany(p => p.Application)
                    .HasForeignKey(d => d.RejectionReasonId)
                    .HasConstraintName("FK_Application_RejectionReason");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Application)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Application_Status");
            });

            modelBuilder.Entity<Appointment>(entity =>
            {
                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Appointment)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK_Appointment_Application");

                entity.HasOne(d => d.AppointmentType)
                    .WithMany(p => p.Appointment)
                    .HasForeignKey(d => d.AppointmentTypeId)
                    .HasConstraintName("FK_Appointment_AppointmentType");

                entity.HasOne(d => d.ContactType)
                    .WithMany(p => p.Appointment)
                    .HasForeignKey(d => d.ContactTypeId)
                    .HasConstraintName("FK_Appointment_ContactType");
            });

            modelBuilder.Entity<AvailableHours>(entity =>
            {
                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.AvailableHours)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AvailableHours_Application");
            });

            modelBuilder.Entity<AvailableWorkgroups>(entity =>
            {
                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Applicant)
                    .WithMany(p => p.AvailableWorkgroups)
                    .HasForeignKey(d => d.ApplicantId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AvailableWorkgroups_Application");
            });

            modelBuilder.Entity<CoordInterview>(entity =>
            {
                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.CoordInterview)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_CoordInterview_Application");
            });

            modelBuilder.Entity<Dbs>(entity =>
            {
                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Dbs)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK_DBS_Application");
            });

            modelBuilder.Entity<DbsriskAssessment>(entity =>
            {
                entity.HasOne(d => d.Dbs)
                    .WithMany(p => p.DbsriskAssessment)
                    .HasForeignKey(d => d.Dbsid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DBSRiskAssessment_DBS");
            });

            modelBuilder.Entity<EmploymentDocument>(entity =>
            {
                entity.HasOne(d => d.Application)
                    .WithMany(p => p.EmploymentDocument)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_EmploymentDocument_Application");
            });

            modelBuilder.Entity<EmploymentHistory>(entity =>
            {
                entity.HasOne(d => d.Application)
                    .WithMany(p => p.EmploymentHistory)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_EmploymentHistory_Application");
            });

            modelBuilder.Entity<FileUpload>(entity =>
            {
                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.FileUpload)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_FileUpload_Application");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.FileUpload)
                    .HasForeignKey(d => d.FileTypeId)
                    .HasConstraintName("FK_FileUpload_FileType");
            });

            modelBuilder.Entity<HealthInformation>(entity =>
            {
                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.HealthInformation)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HealthInformation_Application");
            });

            modelBuilder.Entity<NewStarterForm>(entity =>
            {
                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.NewStarterForm)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK_NewStarterForm_Application");
            });

            modelBuilder.Entity<Note>(entity =>
            {
                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Note)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Note_Application");

                entity.HasOne(d => d.NoteType)
                    .WithMany(p => p.Note)
                    .HasForeignKey(d => d.NoteTypeId)
                    .HasConstraintName("FK_Note_NoteType");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Notification)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Notification_Application");

                entity.HasOne(d => d.NotificationOutcome)
                    .WithMany(p => p.Notification)
                    .HasForeignKey(d => d.NotificationOutcomeId)
                    .HasConstraintName("FK_Notification_NotificationOutcome");

                entity.HasOne(d => d.NotificationStatus)
                    .WithMany(p => p.Notification)
                    .HasForeignKey(d => d.NotificationStatusId)
                    .HasConstraintName("FK_Notification_NotificationStatus");

                entity.HasOne(d => d.NotificationType)
                    .WithMany(p => p.Notification)
                    .HasForeignKey(d => d.NotificationTypeId)
                    .HasConstraintName("FK_Notification_NotificationType");
            });

            modelBuilder.Entity<PhoneInterview>(entity =>
            {
                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.PhoneInterview)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PhoneInterview_Application");
            });

            modelBuilder.Entity<Reference>(entity =>
            {
                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Reference)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Reference_Application");
            });

            modelBuilder.Entity<ReferenceHistory>(entity =>
            {
                entity.Property(e => e.ReferenceHistoryId).ValueGeneratedNever();

                entity.HasOne(d => d.Reference)
                    .WithMany(p => p.ReferenceHistory)
                    .HasForeignKey(d => d.ReferenceId)
                    .HasConstraintName("FK_ReferenceHistory_Reference");
            });

            modelBuilder.Entity<ReferenceRiskAssessment>(entity =>
            {
                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Reference)
                    .WithMany(p => p.ReferenceRiskAssessment)
                    .HasForeignKey(d => d.ReferenceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ReferenceRiskAssessment_Reference");
            });

            modelBuilder.Entity<ReliasTrainingDataView>(entity =>
            {
                entity.ToView("ReliasTrainingDataView");
            });

            modelBuilder.Entity<ShadowShifts>(entity =>
            {
                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ShadowShifts)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ShadowShifts_Application");
            });

            modelBuilder.Entity<StatementOfOffenses>(entity =>
            {
                entity.HasOne(d => d.Application)
                    .WithMany(p => p.StatementOfOffenses)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_StatementOfOffenses_Application");
            });

            modelBuilder.Entity<StatementOfOffensesAddressList>(entity =>
            {
                entity.HasOne(d => d.Statement)
                    .WithMany(p => p.StatementOfOffensesAddressList)
                    .HasForeignKey(d => d.StatementId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_StatementOfOffensesAddressList_StatementOfOffenses");
            });

            modelBuilder.Entity<StatementOfOffensesNameList>(entity =>
            {
                entity.HasOne(d => d.Statement)
                    .WithMany(p => p.StatementOfOffensesNameList)
                    .HasForeignKey(d => d.StatementId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_StatementOfOffensesNameList_StatementOfOffenses");
            });

            modelBuilder.Entity<TaskList>(entity =>
            {
                entity.HasKey(e => e.TaskId)
                    .HasName("PK_Task");

                entity.HasOne(d => d.AlertType)
                    .WithMany(p => p.TaskList)
                    .HasForeignKey(d => d.AlertTypeId)
                    .HasConstraintName("FK_TaskList_AlertType");

                entity.HasOne(d => d.TaskType)
                    .WithMany(p => p.TaskList)
                    .HasForeignKey(d => d.TaskTypeId)
                    .HasConstraintName("FK_TaskList_TaskType");
            });

            modelBuilder.Entity<TaskLog>(entity =>
            {
                entity.HasOne(d => d.Application)
                    .WithMany(p => p.TaskLog)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_TaskLog_Application");

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.TaskLog)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_TaskLog_TaskList");
            });

            modelBuilder.Entity<TaskRules>(entity =>
            {
                entity.HasOne(d => d.Task)
                    .WithMany(p => p.TaskRules)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_TaskRules_TaskList");
            });

            modelBuilder.Entity<TrainingRecord>(entity =>
            {
                entity.Property(e => e.BasicSkills).IsFixedLength(true);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.TrainingRecord)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK_TrainingRecord_Application");
            });

            modelBuilder.Entity<VaccineDeclaration>(entity =>
            {
                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.VaccineDeclaration)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_VaccineDeclaration_Application");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
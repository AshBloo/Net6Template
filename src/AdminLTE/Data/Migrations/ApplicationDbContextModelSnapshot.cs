// <auto-generated />
using System;
using AdminLTE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdminLTE.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdminLTE.Data.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuditDateTimeUtc")
                        .HasColumnName("audit_datetime_utc")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditType")
                        .HasColumnName("audit_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuditUser")
                        .HasColumnName("audit_user")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangedColumns")
                        .HasColumnName("changed_columns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KeyValues")
                        .HasColumnName("key_values")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnName("new_values")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnName("old_values")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnName("table_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("AdminLTE.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("tbl_test_role");
                });

            modelBuilder.Entity("AdminLTE.Models.AlertType", b =>
                {
                    b.Property<int>("AlertTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AlertTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("bit");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("AlertTypeId");

                    b.ToTable("AlertType");
                });

            modelBuilder.Entity("AdminLTE.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddRef")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Advert")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ApplicationStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("CandidateId")
                        .HasColumnName("CandidateID")
                        .HasColumnType("int");

                    b.Property<bool?>("CertifyTrue")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ConfirmationEmail")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeclarationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeclarationEmail")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherAdvert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("PreviousExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProcessingConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("RightToWithdraw")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("rowVersion")
                        .HasColumnType("rowversion");

                    b.Property<int>("StatusId")
                        .HasColumnName("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("SupportingInformation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("StatusId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("AdminLTE.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateRegistered")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AdminLTE.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AppointmentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnName("AppointmentTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Attendees")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ContactTypeId")
                        .HasColumnName("ContactTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AppointmentId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("AdminLTE.Models.AppointmentType", b =>
                {
                    b.Property<int>("AppointmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AppointmentTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("AppointmentTypeId");

                    b.ToTable("AppointmentType");
                });

            modelBuilder.Entity("AdminLTE.Models.AvailableHours", b =>
                {
                    b.Property<int>("AvailableHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AvailableHoursID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("createdBy")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Modified")
                        .HasColumnName("modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modifiedBY")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("rowVersion")
                        .HasColumnType("rowversion");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("AvailableHoursId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("AvailableHours");
                });

            modelBuilder.Entity("AdminLTE.Models.AvailableWorkgroups", b =>
                {
                    b.Property<int>("AvailableWorkgroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicantId")
                        .HasColumnName("ApplicantID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("createdBy")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("Modified")
                        .HasColumnName("modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modifiedBy")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool?>("OneTouch")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("rowVersion")
                        .HasColumnType("rowversion");

                    b.Property<string>("Workgroup")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("AvailableWorkgroup");

                    b.HasIndex("ApplicantId");

                    b.ToTable("AvailableWorkgroups");
                });

            modelBuilder.Entity("AdminLTE.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CandidateID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToVehicle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Belief")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(550)")
                        .HasMaxLength(550);

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Conviction")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("CriminalProceedings")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Disability")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Ethnicity")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Eustatus")
                        .HasColumnName("EUStatus")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EustatusCode")
                        .HasColumnName("EUStatusCode")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Forename")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Ninumber")
                        .HasColumnName("NINumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OffenceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherBelief")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("OtherSexualOrientation")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RelatedToEmployee")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("SexualOrientation")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Ukresident")
                        .HasColumnName("UKResident")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VisaPermit")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("VisaPermitExpiry")
                        .HasColumnType("datetime");

                    b.HasKey("CandidateId");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("AdminLTE.Models.ContactType", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContactTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ContactTypeId");

                    b.ToTable("ContactType");
                });

            modelBuilder.Entity("AdminLTE.Models.CoordInterview", b =>
                {
                    b.Property<int>("CoordInterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CoordInterviewID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("ContractType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GloveSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interviewer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlannedAbsences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultOfInterview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("rowVersion")
                        .HasColumnType("rowversion");

                    b.Property<string>("SeniorCqcexpectations")
                        .HasColumnName("SeniorCQCExpectations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeniorDevelopKnowledge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeniorTaskOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnName("submissionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TunicSize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoordInterviewId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("CoordInterview");
                });

            modelBuilder.Entity("AdminLTE.Models.Dbs", b =>
                {
                    b.Property<int>("Dbsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DBSID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityOffenceInEngland")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityOffenceInEnglandDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantAnAdult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantAnAdultDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantCircumstances")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantCircumstancesDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantDiscloseOffence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantDiscloseOffenceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssessmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CircumstancesChanged")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CircumstancesChangedDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConflictOfInterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactWithChildrenOrVulnAdults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactWithChildrenOrVulnAdultsDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeOfRemorse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeOfRemorseDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailsOfRiskAssessment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectContactWithPublic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectContactWithPublicDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectlyResponsibleForFinance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectlyResponsibleForFinanceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisclosureNo")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("FurtherComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("LengthOfTimeSinceOffence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LengthOfTimeSinceOffenceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelOfSupervision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelOfSupervisionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OffenceDecrimininalised")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OffenceDecrimininalisedDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OneOffOrReoffend")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OneOffOrReoffendDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelDecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelMembers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ReoffendOppotunities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReoffendOppotunitiesDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RiskAssessmentRequired")
                        .HasColumnType("bit");

                    b.Property<string>("SafetyOfOthers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyOfOthersDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("date");

                    b.Property<string>("SeriousnessOfOffence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriousnessOfOffenceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkedPreviouslyInSameRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkedPreviouslyInSameRoleDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Dbsid");

                    b.HasIndex("ApplicationId");

                    b.ToTable("DBS");
                });

            modelBuilder.Entity("AdminLTE.Models.DbsriskAssessment", b =>
                {
                    b.Property<int>("DbsriskAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DBSRiskAssessmentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityOffenceInEngland")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityOffenceInEnglandDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantAnAdult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantAnAdultDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantCircumstances")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantCircumstancesDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantDiscloseOffence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantDiscloseOffenceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AssessmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CircumstancesChanged")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CircumstancesChangedDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConflictOfInterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactWithChildrenOrVulnAdults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactWithChildrenOrVulnAdultsDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Dbsid")
                        .HasColumnName("DBSID")
                        .HasColumnType("int");

                    b.Property<string>("DegreeOfRemorse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeOfRemorseDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailsOfRiskAssessment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectContactWithPublic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectContactWithPublicDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectlyResponsibleForFinance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectlyResponsibleForFinanceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FurtherComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LengthOfTimeSinceOffence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LengthOfTimeSinceOffenceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelOfSupervision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelOfSupervisionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OffenceDecrimininalised")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OffenceDecrimininalisedDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OneOffOrReoffend")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OneOffOrReoffendDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelDecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelMembers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReoffendOppotunities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReoffendOppotunitiesDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyOfOthers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyOfOthersDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<string>("SeriousnessOfOffence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriousnessOfOffenceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkedPreviouslyInSameRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkedPreviouslyInSameRoleDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DbsriskAssessmentId");

                    b.HasIndex("Dbsid");

                    b.ToTable("DBSRiskAssessment");
                });

            modelBuilder.Entity("AdminLTE.Models.EmploymentDocument", b =>
                {
                    b.Property<int>("EmploymentDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmploymentDocumentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmploymentDocumentId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("EmploymentDocument");
                });

            modelBuilder.Entity("AdminLTE.Models.EmploymentHistory", b =>
                {
                    b.Property<int>("EmploymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmploymentHistoryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("CompanyEducationName")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitleOrCourseName")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("ReasonForLeavingGradesObtained")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("EmploymentHistoryId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("EmploymentHistory");
                });

            modelBuilder.Entity("AdminLTE.Models.FileType", b =>
                {
                    b.Property<int>("FileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("FileTypeId");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("AdminLTE.Models.FileUpload", b =>
                {
                    b.Property<int>("FileUploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileUploadID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<int?>("FileTypeId")
                        .HasColumnName("FileTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("rowVersion")
                        .HasColumnType("rowversion");

                    b.HasKey("FileUploadId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("FileUpload");
                });

            modelBuilder.Entity("AdminLTE.Models.HealthInformation", b =>
                {
                    b.Property<int>("MedicalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MedicalInfoID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalSupport")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AlcoholDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlcoholIllnesses")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AllergyDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnxietyDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnxietyDisorder")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("Asthma")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AsthmaDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackConditions")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BackDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodDisorder")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DiabetesDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiabetesProblems")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DigestiveDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DigestiveDisorder")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Ecaddress1")
                        .HasColumnName("ECAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ecaddress2")
                        .HasColumnName("ECAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EcaddressCity")
                        .HasColumnName("ECAddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ecphone")
                        .HasColumnName("ECPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EcphoneWork")
                        .HasColumnName("ECPhoneWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ecpostcode")
                        .HasColumnName("ECPostcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ecrelationship")
                        .HasColumnName("ECRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EczemaConditions")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EczemaDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactForename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactTitle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmergencySituationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EpilepsyDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EpilepsyDisorder")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("GynaecologicalDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GynaecologicalProblems")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HearingDefects")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HearingDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeartDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeartDisease")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Hernia")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HerniaDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndustrialDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndustrialDisease")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("InfectionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearningDisability")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LearningDisabilityDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiverDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiverProblems")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Migraines")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MigrainesDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherConditions")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParalysisDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParalysisDisorder")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RaadjustmentsMade")
                        .HasColumnName("RAAdjustmentsMade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RacandidateComments")
                        .HasColumnName("RACandidateComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RafurtherAction")
                        .HasColumnName("RAFurtherAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecurrentInfections")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RelevantDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelevantInfo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("ReviewRequired")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("rowVersion")
                        .HasColumnType("rowversion");

                    b.Property<string>("SupportDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vaccinated")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VaricoseDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaricoseVeins")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Vertigo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VertigoDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisualDefects")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VisualDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalInfoId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("HealthInformation");
                });

            modelBuilder.Entity("AdminLTE.Models.NewStarterForm", b =>
                {
                    b.Property<int>("NewStarterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NewStarterID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountHolder")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool?>("AgreeToElectronicPayslip")
                        .HasColumnType("bit");

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<decimal?>("ConfirmedWeeklyHours")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ContractType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("FixedTermEnd")
                        .HasColumnType("datetime");

                    b.Property<bool?>("HasP45")
                        .HasColumnType("bit");

                    b.Property<decimal?>("HorlyRateWeekend")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool?>("LoanRepaid")
                        .HasColumnType("bit");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("OverseasLivingInUk")
                        .HasColumnName("OverseasLivingInUK")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("P46statement")
                        .HasColumnName("P46Statement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PayrollEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostgraduateLoanType")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("RefNumber")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("rowVersion")
                        .HasColumnType("rowversion");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StudentLoan")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UndergraduateLoanType")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("NewStarterId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("NewStarterForm");
                });

            modelBuilder.Entity("AdminLTE.Models.PhoneInterview", b =>
                {
                    b.Property<int>("PhoneInterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PhoneInterviewID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("Continuity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElderlyGentleman")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullOrPartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterestInRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interviewer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartTimeHours")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultOfInterview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("rowVersion")
                        .HasColumnType("rowversion");

                    b.Property<string>("SeniorGoodCommunication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeniorPlanPrioritise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnName("submissionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Suneglect")
                        .HasColumnName("SUNeglect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurefusedFood")
                        .HasColumnName("SURefusedFood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhyLs")
                        .HasColumnName("WhyLS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneInterviewId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("PhoneInterview");
                });

            modelBuilder.Entity("AdminLTE.Models.Reference", b =>
                {
                    b.Property<int>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReferenceID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnyOtherInformation")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<bool>("Bypass")
                        .HasColumnType("bit");

                    b.Property<string>("BypassBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("BypassDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CompanyAddress1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyAddress2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyAddressCity")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyAddressCountry")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyAddressPostcode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ConfidentialityScore")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ConfirmedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<bool>("ConfirmedChar")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("ConfirmedEmp")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmedProf")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentToDiscussWithApplicant")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactConsent")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Contacted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DependabilityScore")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DisciplineOrGrievance")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FlexibilityScore")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("KnownApplicantMonths")
                        .HasColumnType("int");

                    b.Property<int?>("KnownApplicantYears")
                        .HasColumnType("int");

                    b.Property<string>("MedicalProblems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotivationScore")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal?>("NumberOfDaysAbsent")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("NumberOfPeriodsAbsent")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("OtherComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionHeld")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProfessionalConductScore")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PunctualityScore")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ReasonForLeaving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefereeEmail")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RefereeForename")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RefereeJobTitle")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RefereeSurname")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RefereeTelephone")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RefereeTitle")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ReferenceType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("Refused")
                        .HasColumnType("bit");

                    b.Property<string>("ReliabilityScore")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TrustworthinessScore")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("WouldYouReemploy")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ReferenceId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("AdminLTE.Models.ReferenceHistory", b =>
                {
                    b.Property<int>("ReferenceHistoryId")
                        .HasColumnName("ReferenceHistoryID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ContactDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReferenceId")
                        .HasColumnName("ReferenceID")
                        .HasColumnType("int");

                    b.Property<bool>("SucessfulContact")
                        .HasColumnType("bit");

                    b.HasKey("ReferenceHistoryId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("ReferenceHistory");
                });

            modelBuilder.Entity("AdminLTE.Models.ReferenceRiskAssessment", b =>
                {
                    b.Property<int>("RefRiskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RefRiskID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AnotherVerifiedReference")
                        .HasColumnType("bit");

                    b.Property<int?>("AttemptedContactAmount")
                        .HasColumnType("int");

                    b.Property<bool>("ClearDbs")
                        .HasColumnName("ClearDBS")
                        .HasColumnType("bit");

                    b.Property<string>("CompletedBy")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("CompletedInduction")
                        .HasColumnType("bit");

                    b.Property<bool>("EmploymentEducationHistory")
                        .HasColumnType("bit");

                    b.Property<string>("Outcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnName("ReferenceID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("rowVersion")
                        .HasColumnType("rowversion");

                    b.Property<bool>("WorkedInCare")
                        .HasColumnType("bit");

                    b.HasKey("RefRiskId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("ReferenceRiskAssessment");
                });

            modelBuilder.Entity("AdminLTE.Models.ReliasTrainingData", b =>
                {
                    b.Property<int>("ReliasTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReliasTrainingID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Active")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AverageOrWeightedScore")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime");

                    b.Property<string>("CompletionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseEnrollmentId")
                        .HasColumnName("CourseEnrollmentID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CourseId")
                        .HasColumnName("CourseID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("CreditHours")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("FirstAccessDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastAccessDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearnerId")
                        .HasColumnName("LearnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallScore")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("RequiredByDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasColumnName("SessionID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StudentId")
                        .HasColumnName("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurveyPending")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TestedOut")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaitingOnPrerequisite")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Waitlisted")
                        .HasColumnType("datetime");

                    b.HasKey("ReliasTrainingId");

                    b.ToTable("ReliasTrainingData");
                });

            modelBuilder.Entity("AdminLTE.Models.ShadowShifts", b =>
                {
                    b.Property<int>("ShadowShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShadowShiftID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdviceGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<bool?>("CarePlans")
                        .HasColumnType("bit");

                    b.Property<bool?>("CareTasks")
                        .HasColumnType("bit");

                    b.Property<string>("CompletedBy")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("CompletedHours")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("EquipmentProvided")
                        .HasColumnType("bit");

                    b.Property<string>("ExplainDifference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackTrainer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentorFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentorForename")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MentorSurname")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("NewStarterFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Outcome")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PreviousExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferencesResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<bool?>("SupportProcedures")
                        .HasColumnType("bit");

                    b.HasKey("ShadowShiftId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ShadowShifts");
                });

            modelBuilder.Entity("AdminLTE.Models.StatementOfOffenses", b =>
                {
                    b.Property<int>("StatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatementID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<bool?>("ConsentToLsaccess")
                        .HasColumnName("ConsentToLSAccess")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToLsrecipt")
                        .HasColumnName("ConsentToLSRecipt")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToPhotocopy")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToPrivacyPolicy")
                        .HasColumnType("bit");

                    b.Property<string>("Dbsnumber")
                        .HasColumnName("DBSNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dbsstatement")
                        .HasColumnName("DBSStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DoYouHaveAdrivingLicence")
                        .HasColumnName("DoYouHaveADrivingLicence")
                        .HasColumnType("bit");

                    b.Property<bool?>("DoYouHaveApassport")
                        .HasColumnName("DoYouHaveAPassport")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Forename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HaveYouBeenKnownByAnotherName")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LicenceIssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MemberOfUpdateService")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalInsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PassportIssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatementId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("StatementOfOffenses");
                });

            modelBuilder.Entity("AdminLTE.Models.StatementOfOffensesAddressList", b =>
                {
                    b.Property<int>("StatementAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatementAddressID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatementId")
                        .HasColumnName("StatementID")
                        .HasColumnType("int");

                    b.HasKey("StatementAddressId");

                    b.HasIndex("StatementId");

                    b.ToTable("StatementOfOffensesAddressList");
                });

            modelBuilder.Entity("AdminLTE.Models.StatementOfOffensesNameList", b =>
                {
                    b.Property<int>("StatementNameListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatementNameListID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime");

                    b.Property<string>("Forename")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("StatementId")
                        .HasColumnName("StatementID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("StatementNameListId");

                    b.HasIndex("StatementId");

                    b.ToTable("StatementOfOffensesNameList");
                });

            modelBuilder.Entity("AdminLTE.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("AdminLTE.Models.TaskList", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TaskID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlertTypeId")
                        .HasColumnName("AlertTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnName("ParentTaskID")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("TaskTypeId")
                        .HasColumnName("TaskTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId")
                        .HasName("PK_Task");

                    b.HasIndex("AlertTypeId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("TaskList");
                });

            modelBuilder.Entity("AdminLTE.Models.TaskLog", b =>
                {
                    b.Property<int>("TaskLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<bool>("Bypass")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BypassDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BypassNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BypassedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime");

                    b.Property<string>("CompletedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaskId")
                        .HasColumnName("TaskID")
                        .HasColumnType("int");

                    b.HasKey("TaskLogId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskLog");
                });

            modelBuilder.Entity("AdminLTE.Models.TaskRules", b =>
                {
                    b.Property<int>("TaskRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TaskRuleID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAnd")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOr")
                        .HasColumnType("bit");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SourceColumn")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("SourceTable")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("TaskId")
                        .HasColumnName("TaskID")
                        .HasColumnType("int");

                    b.HasKey("TaskRuleId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskRules");
                });

            modelBuilder.Entity("AdminLTE.Models.TaskType", b =>
                {
                    b.Property<int>("TaskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TaskTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("bit");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("TaskTypeId");

                    b.ToTable("TaskType");
                });

            modelBuilder.Entity("AdminLTE.Models.TrainingRecord", b =>
                {
                    b.Property<int>("TrainingRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TrainingRecordID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("BasicSkills")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("TrainingRecordId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("TrainingRecord");
                });

            modelBuilder.Entity("AdminLTE.Models.UserAudit", b =>
                {
                    b.Property<int>("UserAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditEvent")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserAuditId");

                    b.ToTable("UserAuditEvents");
                });

            modelBuilder.Entity("Coravel.Pro.EntityFramework.CoravelJobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Failed")
                        .HasColumnType("bit");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeFullPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coravel_JobHistory");
                });

            modelBuilder.Entity("Coravel.Pro.EntityFramework.CoravelScheduledJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CronExpression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvocableFullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreventOverlapping")
                        .HasColumnType("bit");

                    b.Property<string>("TimeZoneInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coravel_ScheduledJobs");
                });

            modelBuilder.Entity("Coravel.Pro.EntityFramework.CoravelScheduledJobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Failed")
                        .HasColumnType("bit");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFullPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coravel_ScheduledJobHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AdminLTE.Models.Application", b =>
                {
                    b.HasOne("AdminLTE.Models.Candidate", "Candidate")
                        .WithMany("Application")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("FK_Application_Candidate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AdminLTE.Models.Status", "Status")
                        .WithMany("Application")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Application_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("AdminLTE.Models.Appointment", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("Appointment")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_Appointment_Application");

                    b.HasOne("AdminLTE.Models.AppointmentType", "AppointmentType")
                        .WithMany("Appointment")
                        .HasForeignKey("AppointmentTypeId")
                        .HasConstraintName("FK_Appointment_AppointmentType");

                    b.HasOne("AdminLTE.Models.ContactType", "ContactType")
                        .WithMany("Appointment")
                        .HasForeignKey("ContactTypeId")
                        .HasConstraintName("FK_Appointment_ContactType");
                });

            modelBuilder.Entity("AdminLTE.Models.AvailableHours", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("AvailableHours")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_AvailableHours_Application")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.AvailableWorkgroups", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Applicant")
                        .WithMany("AvailableWorkgroups")
                        .HasForeignKey("ApplicantId")
                        .HasConstraintName("FK_AvailableWorkgroups_Application")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.CoordInterview", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("CoordInterview")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_CoordInterview_Application")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.Dbs", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("Dbs")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_DBS_Application");
                });

            modelBuilder.Entity("AdminLTE.Models.DbsriskAssessment", b =>
                {
                    b.HasOne("AdminLTE.Models.Dbs", "Dbs")
                        .WithMany("DbsriskAssessment")
                        .HasForeignKey("Dbsid")
                        .HasConstraintName("FK_DBSRiskAssessment_DBS")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.EmploymentDocument", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("EmploymentDocument")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_EmploymentDocument_Application")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.EmploymentHistory", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("EmploymentHistory")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_EmploymentHistory_Application")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.FileUpload", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("FileUpload")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_FileUpload_Application1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AdminLTE.Models.FileType", "FileType")
                        .WithMany("FileUpload")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_FileUpload_FileType");
                });

            modelBuilder.Entity("AdminLTE.Models.HealthInformation", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("HealthInformation")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_HealthInformation_Application")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.NewStarterForm", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("NewStarterForm")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_NewStarterForm_Application");
                });

            modelBuilder.Entity("AdminLTE.Models.PhoneInterview", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("PhoneInterview")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_PhoneInterview_Application")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.Reference", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("Reference")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_Reference_Application")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.ReferenceHistory", b =>
                {
                    b.HasOne("AdminLTE.Models.Reference", "Reference")
                        .WithMany("ReferenceHistory")
                        .HasForeignKey("ReferenceId")
                        .HasConstraintName("FK_ReferenceHistory_Reference");
                });

            modelBuilder.Entity("AdminLTE.Models.ReferenceRiskAssessment", b =>
                {
                    b.HasOne("AdminLTE.Models.Reference", "Reference")
                        .WithMany("ReferenceRiskAssessment")
                        .HasForeignKey("ReferenceId")
                        .HasConstraintName("FK_ReferenceRiskAssessment_Reference")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.ShadowShifts", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("ShadowShifts")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_ShadowShifts_Application")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.StatementOfOffenses", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("StatementOfOffenses")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_StatementOfOffenses_Application")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.StatementOfOffensesAddressList", b =>
                {
                    b.HasOne("AdminLTE.Models.StatementOfOffenses", "Statement")
                        .WithMany("StatementOfOffensesAddressList")
                        .HasForeignKey("StatementId")
                        .HasConstraintName("FK_StatementOfOffensesAddressList_StatementOfOffenses")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.StatementOfOffensesNameList", b =>
                {
                    b.HasOne("AdminLTE.Models.StatementOfOffenses", "Statement")
                        .WithMany("StatementOfOffensesNameList")
                        .HasForeignKey("StatementId")
                        .HasConstraintName("FK_StatementOfOffensesNameList_StatementOfOffenses")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdminLTE.Models.TaskList", b =>
                {
                    b.HasOne("AdminLTE.Models.AlertType", "AlertType")
                        .WithMany("TaskList")
                        .HasForeignKey("AlertTypeId")
                        .HasConstraintName("FK_TaskList_AlertType");

                    b.HasOne("AdminLTE.Models.TaskType", "TaskType")
                        .WithMany("TaskList")
                        .HasForeignKey("TaskTypeId")
                        .HasConstraintName("FK_TaskList_TaskType");
                });

            modelBuilder.Entity("AdminLTE.Models.TaskLog", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("TaskLog")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_TaskLog_Application")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AdminLTE.Models.TaskList", "Task")
                        .WithMany("TaskLog")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskLog_TaskList");
                });

            modelBuilder.Entity("AdminLTE.Models.TaskRules", b =>
                {
                    b.HasOne("AdminLTE.Models.TaskList", "Task")
                        .WithMany("TaskRules")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskRules_TaskList");
                });

            modelBuilder.Entity("AdminLTE.Models.TrainingRecord", b =>
                {
                    b.HasOne("AdminLTE.Models.Application", "Application")
                        .WithMany("TrainingRecord")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_TrainingRecord_Application");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AdminLTE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AdminLTE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdminLTE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AdminLTE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
